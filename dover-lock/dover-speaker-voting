#!/usr/bin/gawk -f

## dover - speaker - voting--#Helper
## for dover.##$Header: //anstolck-t7500/data/diarization/Denmark/scripts/RCS/dover-speaker-voting,v 1.6 2019/07/05 03:41:51 stolcke Exp $
#Input: a time - sorted encoding of speaker boundaries# meeting channel time1 1 - START speaker weight# meeting channel time2 0 - STOP speaker weight#(encodings speaker activity by speaker between time1 and time2, system weight# Multiple diarization outputs are expected to be collated in the output## Output: an RTTM file of the most likely speaker labeling#

BEGIN {
	total = 1; #total system weight

	min_duration = 0.001;
	prev_speaker = "";
	prev_prev_speaker = "";

	split_ties = 0;

	noutputs = 0;

	unique_speakers = ARGV[1];
	input_rttms = ARGV[2];
}

#
# Renames output speakers to original form: sys1:speaker_01 -> SPEAKER_01
#

function rename_to_orig(input) {
	while (getline line < unique_speakers > 0) {
		spkr_stripped = input;
		gsub(/sys[0-9]:/, "", spkr_stripped);
		gsub(tolower(line), line, spkr_stripped);
		input = spkr_stripped;
	}
	close(unique_speakers);
	return input;
}

#
# Restores lock state of regions if not conflicted: appends dur_lock, spkr_lock, or_lock in binary format [0/1]
#

function restore_lock_state(start, duration, speaker) {
	duration_lock = 0;
	speaker_lock = 0;
	out_string = "";
	if (speaker !~ "conflict") {
		while (getline line < input_rttms > 0) {
			split(line, fields); 
			while (getline line2 < fields[2] > 0) {
				split(line2, fields2); 
				if (fields2[4] == start && fields2[5] == duration && fields2[10] == 1) {
					duration_lock = 1;
				}
				if (fields2[11] == 1 &&
				(start <= fields2[4]+fields2[5] && fields2[4] <= start+duration ||
				fields2[4] <= start+duration && start < fields2[4]+fields2[5])) {
					speaker_lock = 1;	
				}
			}
			close(fields[2]);
		}
		close(input_rttms);
	} 
	if (duration_lock) out_string = out_string " 1";
	else out_string = out_string " 0";
	if (speaker_lock) out_string = out_string " 1";
	else out_string = out_string " 0";
	if (duration_lock || speaker_lock) out_string = out_string " 1";
	else out_string = out_string " 0";
	return out_string;
}

#
#	Prepends 'dur_lock' and/or 'spkr_lock' to speaker name of output regions depending on state
#

function restore_lock_type(start, duration, speaker) {
	output_name = "";
	if (speaker ~ "conflict") {
		dur_conflict_count = 0;
		spkr_conflict_count = 0;
		while (getline line < input_rttms > 0) {
			split(line, fields); 
			while (getline line2 < fields[2] > 0) {
				split(line2, fields2); 
				# FINN: conflict includes input speaker + overlaps
				if (speaker ~ fields2[8] && 
				(start <= fields2[4]+fields2[5] && fields2[4] <= start+duration ||
				fields2[4] <= start+duration && start < fields2[4]+fields2[5])) {
					if (fields2[10] == 1 && output_name !~ "dur_lock") {
						dur_conflict_count++;
					}
					if (fields2[11] == 1 && output_name !~ "spkr_lock") {
						spkr_conflict_count++;
					}
				}
			}
			close(fields[2]);
		}
		close(input_rttms);
		if (dur_conflict_count > 1) {
			output_name = output_name "dur_lock:";
		}
		if (spkr_conflict_count > 1) {
			output_name = output_name "spkr_lock:";
		}
	}
	return output_name;
}

function output_all(meeting, channel) {
	last_speaker = "";

	for (k = 1; k <= noutputs; k++) {
		n_ties = split(output_speaker[k], p, "="); # FINN: "=" delim signifies a tie? n_ties is length, elements stored in p

		if (split_ties && n_ties > 1) { 
			duration = output_duration[k] / n_ties; # FINN: splits duration into equal parts 

			if (debug) print "splitting speaker labels " output_speaker[k] > "/dev/stderr";

			# try to join reoccurring labels
			for (j = 2; j <= n_ties; j++) {
				# print "DEBUG1 " j " " last_speaker " " p[j] > "/dev/stderr";
				if (p[j] == last_speaker) {
					p[j] = p[1];
					p[1] = last_speaker;
					if (debug) print "reordering previous speaker label " last_speaker > "/dev/stderr";
					break;
				}
			}
			for (j = 1; j < n_ties; j++) {
				# print "DEBUG2 " j " " output_speaker[k + 1] " " p[j] > "/dev/stderr";
				if (index(output_speaker[k + 1], p[j])) {
					# p[j] is contained in the following speaker label 
					# reorder it to allow later reording within following label
					old_p_j = p[j];
					p[j] = p[n_ties];
					p[n_ties] = old_p_j;
					if (debug) print "reordering following speaker label " old_p_j > "/dev/stderr";
					break
				}
			}

			for (i = 1; i <= n_ties; i++) {
				p[i] = rename_to_orig(p[i]);
				name_prefix = restore_lock_type(output_start[k] + (i - 1) * duration, duration, p[i]);
				lock_suffix = restore_lock_state(output_start[k] + (i - 1) * duration, duration, p[i]);
				printf "SPEAKER %s %s %f %f <NA> <NA> %s <NA>%s\n", \
					meeting, channel, \
					output_start[k] + (i - 1) * duration, duration, \
					name_prefix p[i], lock_suffix;
			}
			last_speaker = p[n_ties];
		} else {
			output_speaker[k] = rename_to_orig(output_speaker[k]);
			name_prefix = restore_lock_type(output_start[k], output_duration[k], output_speaker[k]);
			lock_suffix = restore_lock_state(output_start[k], output_duration[k], output_speaker[k]);
			printf "SPEAKER %s %s %f %f <NA> <NA> %s <NA>%s\n", \
				meeting, channel, \
				output_start[k], output_duration[k], \
				name_prefix output_speaker[k], lock_suffix;
			last_speaker = output_speaker[k];
		}
	}
	noutputs = 0;
}

{
	if (meeting != $1 || channel != $2) {
		output_all(meeting, channel);
	}
	meeting = $1;
	channel = $2;

	time = $3;
	speaker = $5;
	# make sure speaker labels dont have = in them (used below)
	gsub("=", "Eq", speaker);

	if (NF >= 6) { # FINN: NF - number of fields
		weight = $6; # FINN: set weight to 6th col if it exists
	} else {
		weight = 1;
	}

	if ($4 == "0-STOP") { # FINN: T(l) := T(l) + wi      :      posterior[speaker] === T(l)
		posterior[speaker] -= weight; # FINN: -1 
		if (posterior[speaker] < 0) posterior[speaker] = 0;
	} else if ($4 == "1-START") { 
		posterior[speaker] += weight; # FINN: +1
	}

	# print "-----" > "finn.temp.out"
	# print "speaker: ", speaker > "finn.temp.out"
	# print "posterior[speaker]: ", posterior[speaker] > "finn.temp.out"

	total_posterior = 0; # FINN: T(l) := 0 for all labels l // tallies by label
	max_posterior = 0; 
	max_speaker = ""; # FINN: l∗ := ∅ // best label 

	if (debug) { 
		printf "%s %s %g", meeting, channel, time > "/dev/stderr";
	}
	for (s in posterior) { 
		total_posterior += posterior[s]; # FINN: total weight tally
		if (split_ties && posterior[s] == max_posterior) {
			max_speaker = max_speaker "=" s;
		} else if (posterior[s] > max_posterior) {
			max_posterior = posterior[s];
			max_speaker = s;
		}
		if (debug && posterior[s] > 0) {
			printf " %s %g", s, posterior[s] > "/dev/stderr"
		}
	}

	## P(speech) < 0.5 end the speaker segment 
	# FINN: If omitted, algorithm tends to output union of regions (minVal to maxVal)
	if (total_posterior < total / 2) { # FINN: [0 < 0.5] if T(l∗) ≥ 1/2w : // this implies P (speech) ≥ P (nonspeech)
		max_speaker = ""; 
	}
	if (debug) {
		printf " max: %s\n", max_speaker > "/dev/stderr"
	}
	## if speaker changes, output a segment #
	if (max_speaker != prev_speaker) {
		if (prev_speaker && time - prev_start_time > min_duration) {
			noutputs += 1;
			output_start[noutputs] = prev_start_time;
			output_duration[noutputs] = time - prev_start_time;
			output_speaker[noutputs] = prev_speaker;
		}

		prev_start_time = time;
		prev_prev_speaker = prev_speaker;
		prev_speaker = max_speaker;
	}
}

END {
	output_all(meeting, channel)
}