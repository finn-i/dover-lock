#!/usr/bin/gawk -f

##
##  DOVER utility function which takes two RTTM files as input 
##  and returns regions which overlap with a locked region.
##

BEGIN {
  FS = " "; # Field separator
  output_file = "DOVER/overlaps"; 
  count = 0; # Monitors while loop index
}

# Loop through the records in the first file
FILENAME == ARGV[1] {
  first_file_length = NR; # Number of records
  while (getline line < FILENAME > 0) {
    nf = split(line, fields); 
    if ($1 == "SPEAKER") {
      # Extract start time, end time and dur_lock state
      start_time[count] = fields[4];
      duration[count] = fields[5];
      end_time[count] = start_time[count] + duration[count];
      speaker[count] = fields[8];
      dur_locked[count] = fields[10];
      spkr_locked[count] = fields[11];
    }
    count++;
  }
}

# Loop through the records in the second file
FILENAME == ARGV[2] {
  o_count = 0;
  while (getline line < FILENAME > 0) {
    nf = split(line, fields);
    if ($1 == "SPEAKER") {
      # Extract start time, end time and dur_lock state from the second file
      other_start_time[o_count] = fields[4];
      other_duration[o_count] = fields[5];
      other_end_time[o_count] = other_start_time[o_count] + other_duration[o_count];
      other_speaker[o_count] = fields[8];
      other_dur_locked[o_count] = fields[10];
      other_spkr_locked[o_count] = fields[11];
      for (k = 0; k < count; k++) {
        # Check for overlap
        regions_overlap = (start_time[k] <= other_end_time[o_count] && other_start_time[o_count] <= end_time[k] ||
                          other_start_time[o_count] <= end_time[k] && start_time[k] < other_end_time[o_count]);
        if (regions_overlap) {
          both_dur_locked = (dur_locked[k] == 1 && other_dur_locked[o_count] == 1); # Both regions are duration locked
          both_spkr_locked = (spkr_locked[k] == 1 && other_spkr_locked[o_count] == 1); # Both regions are speaker locked
          if (both_dur_locked || both_spkr_locked) { 
            # Get smallest start value and highest end value
            min_start = (start_time[k] < other_start_time[o_count]) ? start_time[k] : other_start_time[o_count]; 
            max_duration = (end_time[k] > other_end_time[o_count]) ? end_time[k]-min_start : other_end_time[o_count]-min_start;
            # Ensures duration lock has start/stop time priority
            if (both_spkr_locked) { 
              if (dur_locked[k] == 1 && other_dur_locked[o_count] == 0) { 
                min_start = start_time[k];
                max_duration = duration[k];
              } else if (dur_locked[k] == 0 && other_dur_locked[o_count] == 1) {
                min_start = other_start_time[o_count];
                max_duration = other_duration[o_count];
              }
            }
            # Conflict flag: region to change followed by updated region props
            first_spkr = speaker[k];
            second_spkr = other_speaker[o_count];
            gsub(/sys[0-9]:/, "", first_spkr);
            gsub(/sys[0-9]:/, "", second_spkr);
            if (first_spkr == second_spkr) { # If speaker names match, ensure NAME/NAME becomes NAME
              print "CONFLICT", ARGV[1], start_time[k], duration[k], 
                "conflict:"speaker[k], min_start, max_duration >> output_file;
            } else {
              print "CONFLICT", ARGV[1], start_time[k], duration[k], 
                "conflict:"speaker[k]"/"other_speaker[o_count], min_start, max_duration >> output_file;
              print ARGV[2], other_start_time[o_count], other_duration[o_count] >> output_file; # Remove extra region (has been merged)
            }
          } else if (dur_locked[k] == 1) { # Flag overlapping region for removal
            print ARGV[2], other_start_time[o_count], other_duration[o_count] >> output_file;
            print "DUR_LOCKED", ARGV[1], start_time[k], duration[k], speaker[k] >> output_file; # TODO: ensure entry doesn't already exist
          } else if (other_dur_locked[o_count] == 1) { # Flag overlapping region for removal
            print ARGV[1], start_time[k], duration[k] >> output_file;
            print "DUR_LOCKED", ARGV[2], other_start_time[k], other_duration[k], other_speaker[k] >> output_file;
          }
          # Flag regions for rename, ensures speaker priority
          if (spkr_locked[k] == 1 && other_spkr_locked[o_count] == 0) { 
            print "RENAME", ARGV[2], other_start_time[o_count], other_duration[o_count], speaker[k] >> output_file;
          } else if (other_spkr_locked[o_count] == 1 && spkr_locked[k] == 0) {
            print "RENAME", ARGV[1], start_time[k], duration[k], other_speaker[o_count] >> output_file;
          }
        }
      }
    }
    o_count++;
  }
}

END {
  close(output_file);
}

