#!/bin/sh
#
# dover --
#	Compute a consensus diarization out of many
#	(Diarization Output Voting Error Reduction)
#
# $Header: //anstolck-t7500/data/diarization/Denmark/scripts/RCS/dover,v 1.12 2019/07/10 05:43:01 stolcke Exp $
#
# usage:
#	dover [w1] rttm1 [w2] rttm2 ... > new-rttm
#
# where w1, w2, ... are numerical weights (must start with digits)
#

bindir=$(dirname $0)

MDE_SCORER=$bindir/md-eval.pl
MDE_FLAGS="-nafc -c 0 -o"

tmpdir=DOVER
rm -rf $tmpdir/rttms/* # FINN
rm -rf $tmpdir/maps/* # FINN
wavname=

split_ties=0

rotate=
sort_rttms=
rank_weighted=0

options=

usage() {
	echo "usage: $0 rttm1 rttm2 ..."
}

while [ $# -gt 0 ]; do
	case "$1" in
	-tmpdir)
		tmpdir=$2
		options="$options $1 $2"
		shift
		shift
		;;
	-name)
		wavname=$2
		options="$options $1 $2"
		shift
		shift
		;;
	-split_ties)
		split_ties=1
		options="$options $1"
		shift
		;;
	-rotate)
		rotate=1
		shift
		;;
	-rotate_split_ties)
		rotate=1
		split_ties=1
		shift
		;;
	-sort_by_der)
		sort_rttms=1
		shift
		;;
	-rank_weighted)
		rank_weighted=$2
		options="$options $1 $2"
		shift
		shift
		;;
	-*)
		echo "unknown option" >&2
		usage
		exit 2
		;;
	*)
		break
		;;
	esac
done

mkdir -p $tmpdir
input_rttms=$tmpdir/input.rttm.list
mapped_rttms=$tmpdir/mapped.rttm.list

if [ -n "$rotate" ]; then
	rm -f $tmpdir/rotated-*.rttm

	rotidx=1
	shifted_args=
	weight=1
	while [ $# -gt 0 ]; do
		case "$1" in
		[0-9]*)
			weight=$1
			;;
		*)
			echo "ROTATION $rotidx" >&2
			(
				set -x
				$0 $options $weight "$@" $shifted_args >$tmpdir/rotated-$rotidx.rttm
			)
			shifted_args="$shifted_args $weight $1"
			rotidx=$(expr $rotidx + 1)
			weight=1
			;;
		esac
		shift
	done

	echo "COMBINATION" >&2
	if [ "$split_ties" = 1 ]; then
		# use -split_ties only in the combination step
		options="$options -split_ties"
	fi
	if [ "$sort_rttms" = 1 ]; then
		# use -sort_by_der only in the combination step
		options="$options -sort_by_der"
	fi
	(
		set -x
		$0 $options $tmpdir/rotated-*.rttm
	)
	exit
fi

>$input_rttms
weight=1
while [ $# -gt 0 ]; do
	case "$1" in
	[0-9]*)
		weight=$1
		;;
	*)
		echo "$weight $1" >>$input_rttms
		weight=1
		;;
	esac
	shift
done

if [ -n "$sort_rttms" ]; then
	$bindir/dover-sort-rttms $input_rttms |
		gawk -v smoothing=$rank_weighted '{ print $1 * (1/NR)^smoothing, $2 }' \
			>$input_rttms.sorted
	input_rttms=$input_rttms.sorted
fi

#
# rewrite an rttm using system-specific speaker labels
# (also, lowercase speaker label since md-eval does that too)
#
relabel_rttm() {
	gawk -v prefix="$2" -v name="$3" \
		'$1 == "SPEAKER" { if (name) $2 = name;
				   $8 = prefix ":" tolower($8); print }' $1
}

#
# rewrite an rttm using a speaker mapping
#
map_rttm_speakers() { # FINN: mapped[x].rttm = map_rttm_speakers(map[x], sys[x].rttm)
	echo "map_rttm_speakers()\n1: $1 \n2: $2" >&2
	>/tmp/myout.txt
	gawk 'ARGIND == 1 { 
				if ($1 in skpr_map && spkr_map[$1] != $2) {
					print "multiple speaker maps for " $1 > "/dev/stderr"; 
				} else if ($2 in spkr_rev_map && spkr_rev_map[$2] != $1) {
					# if the overlap of the new mapping is larger, update it
					if ($3 > spkr_overlap[spkr_rev_map[$2],$2]) {
						delete spkr_map[spkr_rev_map[$2]];
						spkr_map[$1] = $2;
						spkr_rev_map[$2] = $1;
						spkr_overlap[$1,$2] = $3;
						print "using better mapping to speaker " $2 " from " $1 > "/dev/stderr";
					} else {
						print "ignoring second mapping to speaker " $2 " from " $1 > "/dev/stderr";
					}
				} else {
					spkr_map[$1] = $2;
					spkr_rev_map[$2] = $1;
					if ($3 > spkr_overlap[$1,$2]) spkr_overlap[$1,$2] = $3;
				}
			}
			ARGIND == 2 { 
				if ($8 in spkr_map && $12 == 0) { # FINN: speaker lock == 0 / not locked
					$8 = spkr_map[$8];
				}
				print
			}' $1 $2
}

mkdir -p $tmpdir/rttms $tmpdir/maps

#
# Aligned and map all speaker labels to a common set
#

>$mapped_rttms


>"$tmpdir/overlaps"; # Clear output

cat -n $input_rttms | # FINN: input.rttm.list
	while read idx weight input_rttm; do # FINN: for each input rttm
		relabeled_rttm=$tmpdir/rttms/sys$idx.rttm # FINN: sys[x].rttm

		echo "mapping $input_rttm" >&2

		relabel_rttm $input_rttm sys$idx "$wavname" >$relabeled_rttm # FINN: prepends sys[idx] to lowercase speaker name 

		if [ ! -s $mapped_rttms ]; then # FINN: -s returns true if file exists and size > 0
			echo "$weight $relabeled_rttm" >$mapped_rttms
		else
			# compute speaker map between all previously processed rttms and this one

			prev=1 # FINN: comparator index, starting with first input (sys1)

			cat $mapped_rttms | # FINN: mapped.rttm.list
				while read wt prev_rttm; do
					$MDE_SCORER $MDE_FLAGS -r $prev_rttm -s $relabeled_rttm -M $tmpdir/maps/map$idx-$prev.orig >$tmpdir/maps/map$idx-$prev.log 2>&1

					# record mapped speaker labels and their overlap
					gawk -F "," '$5 == "mapped" { print $4, $3, $6 }' $tmpdir/maps/map$idx-$prev.orig
					prev=$(expr $prev + 1)
				done | sort -u -k3,3 >$tmpdir/maps/map$idx # FINN: write to map[x], sorted by overlap duration (desc.)

			mapped_rttm=$tmpdir/rttms/mapped$idx.rttm 
			# FINN: mapped[x].rttm = map_rttm_speakers(map[x], sys[x].rttm)
			map_rttm_speakers $tmpdir/maps/map$idx $relabeled_rttm >$mapped_rttm 

			echo "$weight $mapped_rttm" >>$mapped_rttms # FINN: mapped.rttm.list
		fi
	done

# FINN: Generate file 'overlaps' containing all overlapping regions
cat -n $mapped_rttms | # -n numbers all output lines [idx]
	while read idx1 weight rttm1; do
		cat -n $mapped_rttms | 
			while read idx2 weight rttm2; do
				if [ $idx1 -lt $idx2 ]; then
					$bindir/detect-lock-overlaps $rttm1 $rttm2
				fi
			done
	done

#
# Collate all rttms and combine speaker hypotheses. 
# Adapted to alter output based on flags in file 'overlaps'.
#
incount=$(wc -l "$input_rttms")
cat $mapped_rttms |
	while read weight rttm; do
		gawk -v weight=$weight -v infile="$tmpdir/overlaps" -v inrttmsfile="$input_rttms" -v incount="$incount" \
			'{ 
				overlapsWithLock = 0;
				durationConflict = 0;
				assertRename = 0;
				durationLocked = 0;

				while (getline line < infile > 0) {
					nf = split(line, fields)
					if (fields[1] == "CONFLICT" && FILENAME == fields[2] && $4 == fields[3] && $5 == fields[4]) { # FINN: Duration conflict encountered
						durationConflict = line; # FINN: Duration conflict match, set rename var
					} else if (fields[1] == "RENAME" && FILENAME == fields[2] && $4 == fields[3] && $5 == fields[4]) {
						assertRename = line;
					} else if (FILENAME == fields[1] && $4 == fields[2] && $5 == fields[3]) {
						overlapsWithLock = 1; # FINN: if record exists in overlaps, flag for removal
					} 
					if (fields[1] == "DUR_LOCKED" && FILENAME == fields[2] && $4 == fields[3] && $5 == fields[4]) {
						durationLocked = line;
					} 
				}
				close(infile); # FINN: Crucial - otherwise overlaps is only read once
				if (durationConflict != 0) {
					nf = split(durationConflict, union_fields);
					for (i = 1; i < incount; i++) {
						print $2, $3, union_fields[6], "1-START", union_fields[5], weight;
						print $2, $3, union_fields[6]+union_fields[7], "0-STOP", union_fields[5], weight;
					}
					close(inrttmsfile);
				} else if (assertRename != 0 && overlapsWithLock == 0) {
					nf = split(assertRename, fields);
					print $2, $3, $4, "1-START", fields[5], weight;
					print $2, $3, $4+$5, "0-STOP", fields[5], weight;
				} else if (overlapsWithLock == 0) {
					print $2, $3, $4, "1-START", $8, weight; # FINN: e.g. ex1 1 0.75 1-START sys1:speaker_b 1
					print $2, $3, $4+$5, "0-STOP", $8, weight;
				}
				if (durationLocked != 0 && durationConflict == 0) {
					nf = split(durationLocked, fields);
					name = "";
					if (assertRename != 0) {
						split(assertRename, renameFields);
						name = renameFields[5]; # if region has been renamed, retain new name
					} else { 
						name = fields[5];
					}
					# while (getline inputline < inrttmsfile > 0) { # FINN: 
					for (i = 2; i < incount; i++) {  
						print $2, $3, fields[3], "1-START", name, weight; 
						print $2, $3, fields[3]+fields[4], "0-STOP", name, weight;
					} 
					close(inrttmsfile);
				}
			 }' $rttm 
	done | sort +0 -1 +1 -2 +2n -3 >$tmpdir/collated # FINN: sort first column asc., second asc., third numerical (-n) desc.

total_weight=$(gawk '{ sum += $1 } END { print sum }' <$mapped_rttms) 

#
# Find all unique speaker names for renaming output names in dover-speaker-voting
#

output_unique="$tmpdir/unique-speakers"
unique_speakers=""

while IFS=" " read -r weight rttm_file; do
	current_speakers=$(awk '{ if ($1 == "SPEAKER") print $8}' "$rttm_file" | sort -u)
	unique_speakers="$unique_speakers $current_speakers"
done < "$input_rttms"

>$output_unique
printf "%s\n" "$unique_speakers" | tr ' ' '\n' | sort -u >> $output_unique

#
# DOVER's speaker voting
#
$bindir/dover-speaker-voting debug=1 total="$total_weight" split_ties=$split_ties $tmpdir/collated 2>$tmpdir/collated.votes
